
def _find_root_tiltfile_dir():
    # Find top-level Tilt path
    current = os.path.abspath('./')
    while current != '/':
        if os.path.exists(os.path.join(current, 'tilt_modules')):
            return current

        current = os.path.dirname(current)

    fail('Could not find root Tiltfile')

def _find_cache_dir():
    from_env = os.getenv('TILT_HELM_REMOTE_CACHE_DIR', '')
    if from_env != '':
        return from_env
    return os.path.join(_find_root_tiltfile_dir(), '.helm')

# this is the root directory into which remote helm charts will be pulled/cloned/untar'd
# use `os.putenv('TILT_HELM_REMOTE_CACHE_DIR', new_dir)` to change
# if customizing this location, you will also need to add the new location to your .tiltignore file to prevent infinite loops processing the main tiltfile (See github [issue #3404](https://github.com/tilt-dev/tilt/issues/3404))
helm_remote_cache_dir = _find_cache_dir()

# TODO: =====================================
#   if it ever becomes possible for loaded files to also load their own extensions
#   this method can be replaced by `load('ext://namespace', 'namespace_create')
def namespace_create(name):
    """Returns YAML for a namespace
    Args:    name: The namespace name. Currently not validated.
    """
    k8s_yaml(blob("""apiVersion: v1
kind: Namespace
metadata:
  name: %s
""" % name))
# TODO: end TODO
#   =====================================


def helm_remote(chart, repo_url='', repo_name='', release_name='', values=[], set=[], namespace='', version='', username='', password='', allow_duplicates=False, create_namespace=False):
    # ======== Condition Incoming Arguments
    if repo_name == '':
        repo_name = chart
    if release_name == '':
        release_name = chart
    if namespace == '':
        namespace = 'default'
    if repo_url != '':
        repo_add_command = 'helm repo add %s %s' % (repo_name, repo_url)

        # Add authentification for adding the repository if credentials are provided
        if username != '':
            repo_add_command += ' --username %s' % username
        if password != '':
            repo_add_command += ' --password %s' % password

        local(repo_add_command)  # updates if already added

    # ======== Create Namespace
    if create_namespace and namespace != '' and namespace != 'default':
        # avoid a namespace not found error
        namespace_create(namespace)  # do this early so it manages to register before we attempt to install into it

    # ======== Initialize
    # -------- targets
    pull_target = os.path.join(helm_remote_cache_dir, repo_name)
    if version != '':
        pull_target = os.path.join(pull_target, version)
    else:
        pull_target = os.path.join(pull_target, 'latest')

    chart_target = os.path.join(pull_target, chart)

    # -------- commands
    pull_command = 'helm pull %s/%s --untar --destination %s' % (repo_name, chart, pull_target)
    if version != '':
        pull_command += ' --version %s' % version
    if username != '':
        pull_command += ' --username %s' % username
    if password != '':
        pull_command += ' --password %s' % password

    # ======== Perform Installation
    local('rm -rf %s' % chart_target,
          command_bat='if exist %s ( rd /s /q %s )' % (chart_target, chart_target))
    local(pull_command)

    install_crds(chart, chart_target)

    # TODO: since neither `k8s_yaml()` nor `helm()` accept resource_deps,
    # sometimes the crds haven't yet finished installing before the below tries
    # to run
    yaml = helm(chart_target, name=release_name, namespace=namespace, values=values, set=set)

    # The allow_duplicates API is only available in 0.17.1+
    if allow_duplicates and _version_tuple() >= [0, 17, 1]:
        k8s_yaml(yaml, allow_duplicates=allow_duplicates)
    else:
        k8s_yaml(yaml)

def _version_tuple():
  ver_string = str(local('tilt version', quiet=True))
  versions = ver_string.split(', ')
  # pull first string and remove the `v` and `-dev`
  version = versions[0].replace('-dev', '').replace('v', '')
  return [int(str_num) for str_num in version.split(".")]

# install CRDs as a separate resource and wait for them to be ready
def install_crds(name, directory):
    name += '-crds'
    files = str(local(r"grep --include='*.yaml' --include='*.yml' -rEil '\bkind[^\w]+CustomResourceDefinition\s*$' %s || exit 0" % directory)).strip()

    if (files == ''):
        files = []
    else:
        files = files.split("\n")

    # we're applying CRDs directly and not using helm preprocessing
    # this will cause errors!
    # since installing CRDs in this function is a nice-to-have, just skip
    # any that have preprocessing
    files = [f for f in files if str(read_file(f)).find('{{') == -1]

    if len(files) != 0:
        local_resource(name+'-install', cmd='kubectl apply -f %s' % " -f ".join(files), deps=files)  # we can wait/depend on this, but it won't cause a proper uninstall
        k8s_yaml(files)  # this will cause a proper uninstall, but we can't wait/depend on it

        # TODO: Figure out how to avoid another named resource showing up in the tilt HUD for this waiter
        local_resource(name+'-ready', resource_deps=[name+'-install'], cmd='kubectl wait --for=condition=Established crd --all')  # now we can wait for those crds to finish establishing
