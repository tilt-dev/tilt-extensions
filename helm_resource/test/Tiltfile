# -*- mode: Python -*-

load('../Tiltfile', 'helm_resource', 'helm_repo')

local_resource(
  name='unittest',
  cmd=["python3", "../namespacing_test.py"])

docker_build(
  'helloworld-image',
  './src',
  dockerfile='./Dockerfile')

# The ./helloworld helm chart is the default
# chart generated by 'helm create'
helm_resource(
  'helloworld',
  './helloworld',
  namespace='app',
  deps=['./helloworld'],
  image_deps=['helloworld-image'],
  image_keys=[('image.repository', 'image.tag')],
  labels=['helloworld'],
  flags=['--create-namespace'])

# Check that our `namespace:` was preserved in configmap data
local_resource('helloworld-check',
               """
               data=$(kubectl get configmap/configmap-namespace-data --namespace app -o jsonpath='{.data.properties}')
               test "$data" = "namespace:"
               """,
               labels=['helloworld'],
               resource_deps=['helloworld'])

# Make sure helm charts that install to multiple namespaces work.
local_resource('helloworld-check-multi-namespace',
               """
               data=$(kubectl get configmap/helloworld-systemconfig --namespace kube-public -o jsonpath='{.data.hello}')
               test "$data" = "world"
               """,
               labels=['helloworld'],
               resource_deps=['helloworld'])

helm_resource(
  'helloregistry',
  './helloregistry',
  namespace='app',
  deps=['./helloregistry'],
  image_deps=['helloworld-image'],
  image_keys=[('image.registry', 'image.repository', 'image.tag')],
  labels=['helloregistry'],
  flags=['--create-namespace'])

k8s_resource(
  'helloworld',
  port_forwards=['8080:80'])

k8s_resource(
  'helloregistry',
  port_forwards=['8081:80']
)

helm_repo(
  'bitnami',
  'https://charts.bitnami.com/bitnami',
  labels=['memcached'],
  resource_name='helm-repo-bitnami')

helm_resource(
  'memcached',
  'bitnami/memcached',
  labels=['memcached'],
  resource_deps=['helm-repo-bitnami'])
