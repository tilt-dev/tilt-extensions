# -*- mode: Python -*-

version_settings(constraint='>=0.23.4')

def helm_resource(
    name,
    chart,
    deps=[],
    release_name='',
    namespace=None,
    image_deps=None,
    image_keys=None,
    flags=None,
    image_selector='',
    container_selector='',
    live_update=None,
    resource_deps=None,
    labels=None,
    port_forwards=[]):
  """Installs a helm chart to a cluster.

  Args:
    name: The name of the resource in the Tilt UI.
    chart: A reference to a chart. Uses the same syntax as `helm install
      [release-name] [chart]`. May be a local path, a local tarball, or a `repo/name`
      reference.
    deps: A list of file dependencies that should trigger a deployment.
    release_name: The name of the release. If not specified, defaults to the Tilt UI resource name.
    namespace: Install into the specified namespace.
    image_deps: A list of images built by Tilt to inject into the chart. If Tilt doesn't know
      how to build one of these images, this will be an error.
    image_keys`: A list of specifications for how to inject images into the
      chart. Must be the same length as `image_deps`.  There are two common patterns.

      - If your chart accepts an image as a single tagged image reference, specify the key as a string.

      - If your chart accepts an image as a 'repository' and a 'tag', spectify the key
        as a tuple ('image.repository', 'image.tag'). This is how charts created with
        `helm create` are structured.

    flags: Additional flags to pass to `helm install` (e.g., `['--set', 'key=value']`)
    image_selector: Image reference to determine containers eligible for Live Update.
      Only applicable if there are no images in `image_deps`.
    container_selector: Container reference to determine containers eligible for Live Update.
      Only applicable if there are no images in `image_deps`.
    live_update: Live Update steps for images not built by Tilt.
      Only applicable if there are no images in `image_deps`.
    resource_deps: Tilt resources to depend on. Useful for
      adding a dependency on a helm repo install.
    labels: Labels for categorizing the resource.
    port_forwards: Host port to connect to the pod.
  """

  if not release_name:
    release_name=name

  if not image_deps:
    image_deps = []

  if not image_keys:
    image_keys = []

  if len(image_deps) != len(image_keys):
    fail('image_deps and image_keys must have the same length, so that we know how to inject images into the helm chart;')

  if flags:
    # copy and escape the flags array, since we're going to mutate it.
    flags = [shlex.quote(f) for f in flags]
  else:
    flags = []

  for i in range(len(image_deps)):
    key = image_keys[i]
    if type(key) == 'string':
      flags.extend(['--set', '%s=$TILT_IMAGE_%s' % (shlex.quote(key), i)])
    elif type(key) == 'tuple':
      # NOTE(nick): This is a PITA because it's hard to separate
      # out the repository from the tag.
      flags.extend([
        '--set', '%s=$(echo "$TILT_IMAGE_%s" | sed \'s,:[^/]*$,,\')' % (shlex.quote(key[0]), i),
        '--set', '%s=$(echo "$TILT_IMAGE_%s" | sed \'s,^.*:\\([^/]*\\)$,\\1,\')' % (shlex.quote(key[1]), i),
      ])
    else:
      fail("invalid argument to image_keys at %s: %s" % (i, type(key)))

  command_args = {
    'chart': shlex.quote(chart),
    'flags': ' '.join(flags),
    'namespace_arg': '--namespace %s' % shlex.quote(namespace) if namespace else '',
    'release_name': shlex.quote(release_name)
  }

  k8s_custom_deploy(
    name,
    apply_cmd="""
set -ex
helm upgrade %(flags)s %(namespace_arg)s --install %(release_name)s %(chart)s 1>&2
helm get manifest %(namespace_arg)s %(release_name)s | kubectl get %(namespace_arg)s -oyaml -f -
""" % command_args,
    delete_cmd="""
helm uninstall %(namespace_arg)s %(release_name)s || true
""" % command_args,
    deps=deps,
    image_deps=image_deps,
    image_selector=image_selector,
    container_selector=container_selector,
    live_update=live_update)

  if resource_deps:
    k8s_resource(name, resource_deps=resource_deps)

  if labels:
    k8s_resource(name, labels=labels)

  if len(port_forwards):
    k8s_resource(name, port_forwards=port_forwards)


def helm_repo(
    name,
    url,
    resource_name='',
    username='',
    password='',
    **kwargs):
  """Installs a helm repo on tilt up.

  name: The name of the helm repo.
  url: The url of the helm repo.
  resource_name: The name of the resource in the tilt UI. Defaults to `helm-[name]`.
  username: The username for authenticating (if the helm repo is private).
  password: The password for authenticating (if the helm repo is private).
  **kwargs: Arguments to pass to the underlying resource like `labels` (for organization).
  """

  if not resource_name:
    resource_name=name

  args = [
    'helm', 'repo', 'add', name, url,
    '--force-update', # Replace the repo if it already exists.
  ]
  if username:
    args.extend(['--username', username])
  if password:
    args.extend(['--password', password])

  local_resource(resource_name, args, allow_parallel=True, **kwargs)
