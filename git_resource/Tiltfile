# this is the root directory into which remote helm charts will be pulled/cloned/untar'd
# use `helm_remote_set_cache_dir(newDir)` to change
# if customizing this location, you will also need to add the new location to your .tiltignore file to prevent infinite loops processing the main tiltfile
git_remote_checkout_dir = './.git-sources'


def git_remote_set_checkout_dir(directory):
    git_remote_checkout_dir = directory


def git_remote_generic_deployment(image_name, namespace='default'):
    """Returns YAML for a generic deployment
    Args:    image_name: The name of the image to deploy. Currently not validated.
    """
    return blob("""apiVersion: apps/v1
kind: Deployment
metadata:
  name: %s
  namespace: %s
  labels:
    app: %s
spec:
  selector:
    matchLabels:
      app: %s
  template:
    metadata:
      labels:
        app: %s
    spec:
      containers:
      - name: %s
        image: %s-image
""" % (image_name, namespace, image_name, image_name, image_name, image_name, image_name))


def _git_build(name, context, dockerfile='Dockerfile'):
    docker_build(name, context, dockerfile='%s/%s' % (context, dockerfile))
    return None


def git_resource(resource_name, path_or_repo, dockerfile='Dockerfile', yaml='', namespace='default', resource_deps=[], build_callback=None):
    is_http = path_or_repo[:4].lower() == 'http'
    is_ssh = path_or_repo[:4].lower() == 'git@'
    is_local = not is_http and not is_ssh

    if is_local:
        _git_local(resource_name, path_or_repo, dockerfile=dockerfile, yaml=yaml, namespace=namespace, resource_deps=resource_deps, build_callback=build_callback)
    else:
        _git_remote(resource_name, path_or_repo, dockerfile=dockerfile, yaml=yaml, namespace=namespace, resource_deps=resource_deps, build_callback=build_callback)


def _git_remote(name, repository_url, dockerfile='Dockerfile', yaml='', namespace='default', resource_deps=[], build_callback=None):
    parts = repository_url.split('#')
    if len(parts) == 1:
        branch = 'master'
        repository_url = parts[0]
    else:
        branch = parts[-1]  # last item
        repository_url = "#".join(parts[:-1])  # everything else

    repository_name = local('basename %s .git | head -c -1' % repository_url, quiet=True)
    checkout_path = '%s/%s' % (git_remote_checkout_dir, repository_name)

    local('test -d %s && (cd %s && git checkout -f %s && git pull -f) || git clone %s -b %s %s' % (checkout_path, checkout_path, branch, repository_url, branch, checkout_path), quiet=True)

    _git_local(name, checkout_path, dockerfile=dockerfile, yaml=yaml, namespace=namespace, resource_deps=resource_deps, build_callback=build_callback)


def _git_local(name, directory, dockerfile='Dockerfile', yaml=None, namespace='default', resource_deps=[], build_callback=None):
    if yaml == None or yaml == '':
        yaml = git_remote_generic_deployment(name, namespace)

    if build_callback == None:
        _git_build(name+'-image', directory, dockerfile=dockerfile)
    else:
        yaml = build_callback(name, directory, dockerfile=dockerfile, yaml=yaml, namespace=namespace)

    k8s_yaml(yaml)
    k8s_resource(name, resource_deps=resource_deps)
