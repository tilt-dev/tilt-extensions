# -*- mode: Python -*-

def configmap_yaml(name, namespace="", from_file=None, watch=True):
  """Returns YAML for a generic configmap

  Args:
    name: The configmap name.
    namespace: The namespace.
    from_file: Use the from-file configmap generator. May be a string or a list of strings.
       Example: ["grafana.ini=path/to/grafana.ini"]
    watch: Reruns the Tiltfile and re-deploys automatically if the from-files change.
       Defaults to true.

  Returns:
    The configmap YAML as a blob
  """

  args = [
    "kubectl",
    "create",
    "configmap",
    name,
  ]

  if namespace:
    args.extend(["-n", namespace])

  generator = False
  if from_file:
    if type(from_file) == "string":
      from_file = [from_file]

    if type(from_file) == "list":
      for f in from_file:
        args.extend(["--from-file", f])
        if watch:
          l = f.split('=')
          watch_file(l[len(l)-1])
      generator = True
    else:
      fail("Bad from_file argument: %s" % from_file)

  if not generator:
    fail("No configmap generator specified")

  args.extend(["-o=yaml", "--dry-run=client"])
  return local(args, quiet=True)

def configmap_create(name, namespace="", from_file=None, watch=True):
  """Creates a configmap in the current Kubernetes cluster.

  Args:
    name: The configmap name.
    namespace: The namespace.
    from_file: Use the from-file configmap generator. May be a string or a list of strings.
       Example: ["grafana.ini=path/to/grafana.ini"]
    watch: Reruns the Tiltfile and re-deploys automatically if the from-files change.
       Defaults to true.
  """
  k8s_yaml(configmap_yaml(name, namespace, from_file, watch))
